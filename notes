Utiliser un pointer : 

int *pNumber = nullptr; //ou int *pNumber = {nullptr}; permet de pointer sur null

pNumber = {new int(77)}; //allocation dynamique dans le heap ( mémoire disponible pour le programme et non utilisé)

// ou bien on ecrit dans la mémoire allouée la valeur : *pNumber = 77;

/////// style classique pour créer pointer
int number = 88;     // An int variable with a value
int * pNumber;       // Declare a pointer variable called pNumber pointing to an int (or int pointer)
pNumber = &number;
///////

//check for null value
if(pNumber != nullptr){
   std::cout << "*pNumber : " << *pNumber << std::endl;
}
else {
   std::cout << "Ivalid adress" << std::endl;
}

...

delete pNumber; // supression et on rend mémoire à l'os

pNumber = nullptr; // bonne pratique de le faire pointer sur null, améliore la sécurité


****************************************************************
Class
Voir rpgCorrections pour l'organisation fichiers.

int main() {

   Cylinder cylinder1(10,10);

   cylinder1.volume();

   // Managing a stack object through pointers (contient juste l'adresse, pas l'objet contruit)
   Cylinder *p_cylinder1 = &cylinder1

   // Acces à une methode de l'objet de 2 manieres possible, la 2eme à privilégier :
   cout << "Volume : " << (*p_cylinder1).volume(); << endl;
   cout << "Volume : " << p_cylinder1->volume(); << endl;

   // Create cylinder heap objet through the new operator (contient une nouvelle adresse avec création d'objet)
   Cylinder *p_cylinder2 = new Cylinder(100,2); // Comme s'est créee sur le heap ne pas oublier de le supprimer

   cout << "Volume cylinder2: " << p_cylinder2->volume(); << endl;

   // Ne pas oublier de toujours supprimer le pointeur afin de libérer l'adresse
   delete p_cylinder2;
   p_cylinder2 = nullptr;
}

class syntax :
dog.h :
#ifndef DOG_H
#define DOG_H

class Dog
{
   public:
      Dog() = Default;
      Dog(string_view name_param, string_view breed_param, int age_param);
      ~Dog(); //Destructor déclaré

      //Setters
      void SetDogName(string_view name_param)
      {
         dog_name = name_param;
      }
      void some_func();
      ...

      private:
         string dog_name;
         string dog_breed;
         int *dog_age{nullptr};   
}
#endif

dog.cpp :
#include "dog.h"

Dog::Dog() {
   dog_name = "None";
   dog_breed = "None";
   dog_age = new int; // Dynamic memory allocation
   *dog_age = 0;
}

Dog::Dog(string_view name_param, string_view breed_param, int age_param) {
   dog_name = name_param;
   dog_breed = breed_param;
   dog_age = new int; // Memory allocated on the heap
   *dog_age = age_param;
   cout << "Dog constructor called for " << dog_name << "at " << this << endl; 
}

void Dog::Some_func()
{
   Dog *p_dog = new Dog("Medor","Labrador",2);
   delete p_dog; // Causes for the destructor of Dog to be called

//Pourquoi pas :
// main.cpp : 
//     Dog myDog("Medor","Labrador",2);
//     Some_func(myDog);
// dog.cpp
      Some_func(Dog dog)
      {
         
      }
// En passant par copie l'objet dog de la classe Dog, je fais une copie des valeurs, y compris
une copie de l'adresse du pointeur *dog_age. à la fin de la fonction mon objet dog est détruit.
à la fin de la fonction du main, mon objet passé en copie est supprimé également.
Conséquence, je supprime 2 fois un pointeur pointant sur la même adresse, cela cause crash du
programme.


}
 Dog::~Dog()
      {
         delete dog_age; // Release memory
         cout << "Dog destructor called for " << dog_name << "at " << this << endl;endl; 
      }

main.cpp :

Dog myDog("Medor","Labrador",2);
// Le destruteur est appelé automatiquement : 
- When an object is passed by value to a function.
- When a local object is returned from a function
- When a local stack object goes out of scope (dies)
- When a heap object is released with delete

each class member function contain a hidden pointer called this. That pointer contains the
address of the current object, for which  the method is being executed. This also applies
to constructors and destructors.


****************************************************************
Default arguments and virtual function in C++

#include<iostream>
using namespace std;
class B {
   public:
      virtual void s(int a = 0) {
         cout<<" In Base \n";
      }
};
class D: public B {
   public:
      virtual void s(int a) {
         cout<<"In Derived, a="<<a;
      }
};
int main(void) {
   D d; // An object of class D
   B *b= &d;// A pointer of type B* pointing to d
   b->s();// prints"D::s() called"
   return 0;
